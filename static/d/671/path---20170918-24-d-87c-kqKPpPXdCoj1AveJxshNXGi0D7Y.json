{"data":{"site":{"siteMetadata":{"title":"Jon's Blog","author":""}},"markdownRemark":{"id":"dbd7e881-ab81-5504-a317-a9f15007aa8a","excerpt":"learn express web framework setup environment install nvm    nvm  管理node版本的，Node Version Manager   activate nvm by sourcing it from your shell   写入terminal…","html":"<h1>learn express web framework</h1>\n<h2>setup environment</h2>\n<h3>install nvm</h3>\n<p>  <a href=\"https://github.com/creationix/nvm\">nvm</a> 管理node版本的，Node Version Manager</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  cd ~/\n  git clone https://github.com/creationix/nvm.git .nvm\n  cd .nvm\n  git checkout v0.33.4</code></pre></div>\n<p>  activate nvm by sourcing it from your shell</p>\n<p>  写入terminal的配置文件实现自动source</p>\n<p>  例如Bash，则在<code class=\"language-text\">~/.bashrc</code>添加如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  export NVM_DIR=&quot;$HOME/.nvm&quot;\n  [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm\n  [ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</code></pre></div>\n  <dl>\n    <dt><code>~/.bashrc</code></dt><dd></dd>\n    <dt><code>~/.profile</code></dt><dd></dd>\n    <dt><code>~/.zshrc</code></dt><dd></dd>\n  </dl>\n  安装后可能需要重新打开命令行\n  一些指令：\n  ```\n    nvm --help //查看帮助信息\n    nvm ls //查看已安装的版本\n    nvm ls-remote //远程可用版本\n    nvm install --lts //安装最新的LTS版本，默认别名为default\n    nvm install v8 //安装8+版本的最新版,默认别名为node以及stable\n    nvm version node //查看node所指代的版本\n    nvm version stable //查看stable所指代的版本\n    nvm version default //查看default所指代的版本\n    nvm use default //指定使用的版本为default所指代的版本\n    nvm which node //显示别名node所指代的路径\n    nvm which default //显示别名default所指代的路径\n    nodejs --version //因为是通过nvm而非如node官网指示的方式进行安装，会提示nodejs未安装\n    node --version //结果为nvm use所指定的版本\n    which node //结果为nvm use所指定的版本的路径\n    nvm install v8 --reinstall-packages-from=v8 //更新当前使用的8+版本到最新LTS的8+版本，如8.9.1到8.9.3\n  ```\n  所以，在命令行中使用<code>node</code>命令时，即指向<code>nvm use &lt;version&gt;</code>所指代的node版本,路径在~/.nvm的后代目录中\n  nvm将各版本node安装至~/.nvm/versions/node目录下，通过<code>nvm use &lt;version&gt;</code>改变shell中<code>node</code>命令指向.nvm目录下的不同Node版本\n  npm为对应版本node的npm\n  !更深入的理解需要复习linux的文件系统和shell等相关知识．\n<h2>方式一：手动建立一个app</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  mkdir myapp\n  cd myapp\n  npm init //按照提示设置一些信息，这些信息将会存入./package.json文件\n  npm install express --save //安装express这个package,--save的作用是将安装的package版本信息作为dependencies存入package.json文件\n  npm install eslint --save-dev //保存为开发环境下才使用的包</code></pre></div>\n<p>  在js文件中，通过<code>require()</code>来引入,例如在myapp/index.js文件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var express = require(&#39;express&#39;)\n  var app = express()</code></pre></div>\n<p>  在package.json文件中可以设置命令行命令的别名，再通过<code>npm run-script 别名</code>或<code>npm run 别名</code>运行.\n例如，可在myapp/package.json中添加设置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;scripts&quot;: {\n    &quot;lint&quot;: &quot;eslint /home/forward/test/express/myapp/index.js\n  }</code></pre></div>\n<p>  然后可以在myapp/下运行<code>npm run lint</code></p>\n<h2>方式二：通过express application generator建立一个app</h2>\n<p>  The Express Application Generator is not the only generator for Express applications, and the generated project is not the only viable way to structure your files and directories.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  npm install express-generator -g //参数-g表示全局安装\n  express myapp2\n  cd myapp2\n  npm install\n  DEBUG=myapp2:* npm start</code></pre></div>\n<h2>项目练习:The Local Library website</h2>\n  <ul>app开发组分选择指南：\n    <li>快速生产：熟练程度，学习曲线</li>\n    <li>流行程度：社区活力，技术支持</li>\n    <li>语言风格</li>\n    <li>性能</li>\n    <li>特性</li>\n  </ul>\n  <ul>选择：\n    <li>view engine:\n      <ul>\n        <li><a href=\"https://github.com/expressjs/express/wiki#template-engines\">使用express已支持的引擎</a></li>\n        <li><a href=\"https://expressjs.com/en/guide/using-template-engines.html\">配置express未支持的引擎</a></li>\n      </ul>\n    </li>\n    <li>CSS stylesheet engine:\n      <ul>\n        <li>LESS</li>\n        <li>SASS</li>\n        <li>Compass</li>\n        <li>Stylus</li>\n      </ul>\n      <li>database:\n        <ul>\n          <li>express创建的app可以使用任何Node支持的数据库</li>\n          <li><a href=\"https://expressjs.com/en/guide/database-integration.html\">express database integration guide</a></li>\n          <li>使用database的两种方式：\n            <ul>\n              <li>Using the databses' native qurey language (e.g. SQL)</li>\n              <li>Using an Object Data Model (\"ODM\") / Object Relational Model (\"ORM\")</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </li>\n  </ul>\n  <ul>本项目：\n    <li>目录名称：express-locallibrary-tutorial</li>\n    <li>模板引擎：Pug template library</li>\n    <li>CSS引擎：无</li>\n  </ul>\n  步骤：\n  ```\n    mkdir LearnExpress //创建一个新的学习目录\n    cd LearnExpress\n    express express-locallibrary-tutorial --view=pug\n    cd express-locallibrary-tutorial\n    npm install //安装package.json中所指定的dependency packages\n    DEBUG=express-locallibrary-tutorial:* npm start //可访问http://localhost:3000/\n    npm install nodemon --save-dev //实现实时更新，安装nodemon提供支持express website修改后服务器的自动重启，nodemon: https://github.com/remy/nodemon\n  ```\n  版本：<code>\"express\": \"~4.15.2\"</code>,<code>\"pug\": \"~2.0.0-beta11\"</code>\n  此时nodemon为非全局安装，不能直接在命令行中使用．\n  可以设置package.json文件,添加如下内容，通过<code>npm run-script 别名</code>运行\n  ```\n    \"script\": {\n      \"start\": \"node ./bin/www\", //此为默认内容，可以看出前边npm start即依次运行．但此处存疑：npm start或npm run start皆可运行，npm run devstart可运行，npm devstart不可！故而npm start估计应为特例．\n      \"devstart\": \"nodemon ./bin/www\" //此行和上一行末尾的逗号为添加内容\n    },\n  ```\n  现在可以依如下命令运行，附注：此时仍不能用<code>nodemon ./bin/www</code>在命令行运行，会提示找不到命令，因为非全局安装，不添加path只有npm知道运行nodemon\n  ```\n    DEBUG=express-locallibrary-tutorial:* npm run devstart\n  ```\n  亦可输入<code>rs</code>重启.服务器\n<p>  当在命令行运行<code>npm run devstart</code>时，会运行express-locallibrary-tutorial/bin/www\nwww文件为application entry point\n在www文件第一行便通过<code>var app = require(‘../app’)</code>引用了module，即app.js文件，此处代码省略了可选的”.js”后缀．\nrequire()是一个global node function\n在app.js文件中</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var express = require(&#39;express&#39;); //引入express,import a module by name, module name!两种方式： name; path\n  var app = express(); //创建一个express application object，按惯例命名为app\n  ... //对这一app对象添加设置\n  module.exports = app;　//export the app from the module</code></pre></div>\n<p>  当我们导入一个模块的时候，便是导入的这一对象．\nBack in the www entry point file above, it is this <code>module.exports</code> object that is supplied to the caller when this file is imported.\n由此可以看出，对于一个module文件：\n第一部分是其依赖，即该模块所需导入的模块，此例即第一行，是app.js模块所需要导入的模块，也可能需要导入不止一个依赖\n第二部分即此例第二行，是创建app模块的对象\n中间是对这一对象的配置\n最后一行则是导出创建的对象\n??所以module的含义是把一个巨大的object单独存成一个文件进行配置??\nA module is a JavaScript library/file that you can import into other code using Node’s <code>require()</code> function.\nExpress itself is a module, as are the middleware and database libraries that we use in our Express applications.\nYou will want to create your own modules, because this allows you to organise your code into managable parts — a monolithic single-file application is hard to understand and maintain.\nUsing modules also helps you manage your namespace, because only the variables you explicitly export are imported when you use a module.\nTo make objects available outside of a module you just need to assign them to the <code>exports</code> <strong>object</strong>.\nsee <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction#Importing_and_creating_modules\">MDN</a>\n更多有关module机制的学习有待进行，<a href=\"https://nodejs.org/docs/latest-v6.x/api/modules.html\">Node module doc</a></p>\n<p>  route模块的机制\n路由的module文件统一存放在express-locallibrary-tutorial/routes文件夹下\n以express-locallibrary-tutorial/routes/index.js为例</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var express = require(&#39;express&#39;); //依赖\n  var router = express.Router();　//创建express的router对象\n\n  router.get(&#39;/&#39;, function(req, res, next){\n    res.render(&#39;index&#39;, {title: &#39;Express&#39;});\n  });\n\n  module.exports = router; //输出router对象</code></pre></div>\n<p>  在app.js中</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  ...\n  var index = require(&#39;./routes/index&#39;); //导入index路由模块\n  ...\n  app.use(&#39;/&#39;, index); //使用导入的module\n  ...</code></pre></div>\n<p>  可以看到，在app.js和/routes/index.js中两次设置了路径的匹配方式\n在app.js中设置的路径将会作为前缀加到index.js中设置的路径上．\n例如：在app.js中设置路径’/users’，在./routes/users.js中设置路径为’/profile’\n则匹配路径为/users/profile</p>\n<p>  以<code>router.get(){}</code>函数为例，其接受两个参数：匹配路径和callback函数\n匹配路径参数可有三种提供形式：\n1.写死的strings，例如： ’/’, ‘/about’, ‘/book’, ’/’\n2.string patterns，这算是一个正则表达式的子集，规则包括一下４条：</p>\n  <ul>\n    <li><code>?</code>:0 or more of the preceding character. E.g. a route path of <code>'/ab?cd'</code> will matche endpoints <code>acd</code>, <code>abcd</code>, <code>abbcd</code> etc.</li>\n    <li><code>+</code>:1 or more of the preceding character.</li>\n    <li><code>*</code>:an arbitrary string where the * character is placed.</li>\n    <li><code>()</code>:Grouping match on a set of characters to perform another operation on. E.g. <code>'/ab(cd)?e'</code> will peform a ? match on (cd), it will match <code>abe</code>, <code>abcde</code>, <code>abcdcde</code>, and so on.</li>\n  </ul>\n  3.JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">regular expressions</a>\n  例如：<code>app.get(/.*fish$/, function(req, res){})</code>，注意此例没有引号．\n  一个关于路径参数的技术：\n  Route parameters:提取路径的片段信息\n  Route parameters are named URL segments used to capture the values specified at thier position in the URL.\n  实现思路：以:后面跟变量名的形式对应于URL上的路径片段，则此变量名将获得对应路径片对的值，储存于req.params对象，通过点加变量名的形式进行调用．\n  例如：\n  ```\n    app.get('/user/:userId/books/:bookId', function(req, res){\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">})</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">若请求get地址&lt;code&gt;http://localhost:3000/users/34/books/8989&lt;/code&gt;\n则</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">req.params.userId = 34\nreq.params.bookId = 8989</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">注意：\n1.The names of route parameters must be made up of &quot;word characters&quot;(A-Z, a-z, 0-9, and _).\n2.路由的先后顺序．例如除了以上URL路径，我们还需处理&lt;code&gt;/book/create&lt;/code&gt;，我们并不希望捕获&lt;code&gt;req.params.userId = create&lt;/code&gt;，我们希望执行的是其他操作，此时我们需要将处理此URL路径的route定义于&lt;code&gt;/book/:bookId&lt;/code&gt;这个路由的前面．\n更多相关知识有待更深入学习&lt;a href=&quot;http://expressjs.com/en/starter/basic-routing.html&quot;&gt;Express doc&lt;/a&gt;\n\ncallback函数接受三个参数：req, res, next\nthe HTTP Request object, HTTP response ,and the next function in the middleware chain.\nRouter functions are Express middleware, Which means they must either complete(respond to) the request or call the next function in the chain.\nThere are a &lt;a href=&quot;https://expressjs.com/en/guide/routing.html#response-methods&quot;&gt;number of response methods&lt;/a&gt; for ending the request/response cycle.\nAbout middleware in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction#Using_middleware&quot;&gt;MDN&lt;/a&gt;.\nThe &lt;code&gt;Router&lt;/code&gt; provides route methods for all HTTP verbs,用法大致相同\n&lt;ul&gt;\n  &lt;li&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;options()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;trace()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;mkcol()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;move()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;purge()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;propfind()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;proppatch()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;report()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;mkactivity()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;checkout()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;merge()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;m-search()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;subscribe()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;unsubscribe()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\nview机制\n在app.js中设置模板引擎：</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\napp.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));\napp.set(&#39;view engine&#39;, &#39;pug&#39;);\n...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Serving static files\n&lt;a href=&quot;http://expressjs.com/en/4x/api.html#express.static&quot;&gt;express.static&lt;/a&gt; middleware\n\n添加数据库\n\n安装MongoDB\n&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;在ubuntu 16.04 LTS中apt安装Community Server版&lt;/a&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\necho &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">This version of MongoDB does not restrict network access by default. Please review the &lt;a href=&quot;https://docs.mongodb.com/manual/administration/security-checklist/?_ga=2.28129982.323441757.1509515501-1649049113.1506302297&quot;&gt;security checklist&lt;/a&gt; for instructions on how to prevent unauthorized access.\n运行MongoDB</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo service mongod start //start MongoDB\nsudo service mongod stop //stop MongoDB\nsudo service mongod restart //restart MongoDB</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">验证Mongo成功启动，查看日志/var/log/mongodb/mongod.log，提示&lt;code&gt;waiting for connections on port &amp;lt;port&amp;gt;&lt;/code&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tail -f /var/log/mongodb/mongod.log //-f用来持续监控实时更新</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">端口号默认为27017，可在/etc/mongod.conf中配置\n默认数据存储文件路径为/var/lib/mongodb，默认日志文件路径为/var/log/mongodb,也在/etc/mongod.conf中配置</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n# Where and how to store data\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n...\n# where to write logging data\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n...\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">此处仍有两个知识点有待学习，UNIX ulimit Settings和user account，相关描述如下：\nMost Unix-like operating systems limit the system resources that a session may use. These limits may nagatively impact MongoDB operation. See &lt;a href=&quot;https://docs.mongodb.com/manual/reference/ulimit/&quot;&gt;UNIX ulimit Settings&lt;/a&gt; for more information.\nThe MongoDB instance stores its data files in /var/lib/mongodb and its log files in /var/log/mongodb by default, and runs using the mongodb user account. You can specify alternate log and data file directories in /etc/mongod.conf.\nIf you change the user that runs the MongoDB process, you must modify the access control rights to the /var/lib/mongodb and /var/log/mongodb directories to give this user access to these directories.\n\n&lt;a href=&quot;https://docs.mongodb.com/manual/mongo/&quot;&gt;&lt;code&gt;mongo&lt;/code&gt; shell&lt;/a&gt;\nan interactive JavaScript interface to MongoDB\n已作为Community server版的一部分安装\n运行mongo shell需要先运行MongoDB服务!\nWhen you run &lt;code&gt;mongo&lt;/code&gt; without any arguments, the mongo shell will attempt to connect to the MongoDB instance running on the localhost interface on port 27017. To specify a different host or port number, as well as other options, see &lt;a href=&quot;https://docs.mongodb.com/manual/reference/program/mongo/&quot;&gt;mongo Shell Reference Page&lt;/a&gt;.\n??所以可以通过mongo远程连接数据库服务器？需要什么配置和验证？？\nSSH登录VPS后，安装好Mongodb，初步设置UFW防火墙后。\nIf you intend to use the MongoDB server only locally with applications running on the same server,这就足够了。\n若需要从远程连接数据库，需要设置UFW开通对应端口，UFW还可以设置访问者的ip。\n\n\n安装Mongoose</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install mongoose --save //在app目录下运行，同时--save选项保存mongoose依赖至package.json</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">版本：&lt;code&gt;&quot;mongoose&quot;: &quot;^4.11.13&quot;&lt;/code&gt;\n引用mongoose，连接MongoDB</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var mongoose = require(&#39;mongoose&#39;); // Import the mongoose module\nvar mongoDB_addr = &#39;mongodb://127.0.0.1/databaseName&#39; // 将数据库地址设为变量便于操作\nmongoose.connect(mongoDB_addr, { // Set up mongoose conncetion\n  useMongoClient: true\n});</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Mongoose的默认连接逻辑自4.11.0弃用，新的连接逻辑使用&lt;code&gt;useMongoClient&lt;/code&gt;选项\n添加连接的两种方式：</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Using `mongoose.connect`\nvar promise = mongoose.connect(&#39;mongodb://localhost/databaseName&#39;, {\n  useMongoClient: true,\n  /* other options */\n})\n// Or `createConnection`\nvar promise = mongoose.createConnection(&#39;mongodb://localhost/databaseName&#39;, {\n  useMongoClient: true,\n  /* other options */\n});\n// Or, if you already have a connection\nconnection.openUri(&#39;mongodb://localhost/databaseName&#39;, {/* options */})</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">连接后会创建一个connection对象\nThis connection object is then used to create and retrieve models. Models are &lt;strong&gt;always&lt;/strong&gt; scoped to a single connection.\n\n检测连接成功和连接错误</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db.on(&#39;error&#39;, console.error.bind(console, &#39;connection error:&#39;));\ndb.once(&#39;open&#39;, function(){\n  // we&#39;re connected!\n})</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Models are defined using the &lt;code&gt;mongoose.Schema&lt;/code&gt; interface.\nSchemas are then &quot;compiled&quot; into models using &lt;code&gt;mongoose.model()&lt;/code&gt; method.\nSchema相当于是Model的规划表,model用来具体实现CRUD功能，model相当于mongoDB中的collection，model的instance代表组成collection的document．\n先通过&lt;code&gt;mongoose.Schema&lt;/code&gt;创建一个规划表（&lt;code&gt;new&lt;/code&gt;一个新对象）\n然后通过&lt;code&gt;mongoose.model&lt;/code&gt;创建新model，此方法接受两个参数：model的单数形式名字，建造此model所依照的规划表即schema对象\n\n如何使用mongoose\n建议：One schema/model per file\n１．建立model</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// File: myapp/models/modelName1.js\n\n// Require Mongoose\nvar mongoose = require(&#39;mongoose&#39;);\n// Define a schema\nvar modeName1Schema = new mongoose.Schema({\n  FieldName1 : String,\n  FieldName2 : Date,\n});\n// Export function to create &quot;modelName1&quot; model class\nmodule.exports = mongoose.model(&#39;modelName1&#39;, modelName1Schema);</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">此即创建了一个名为modelName1的类class，这个类当然同时也是一个object.待导出即可用\n２．使用model</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Create a modelName1 model just by requiring the module\nvar modelName1 = require(&#39;../models/modelName1.js&#39;)\n// Use the modelName1 object (model) to find all modelName1 records\nmodelName1.find(callback_function);</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mongoose的CRUD操作均为异步操作(asynchronous operation)，You supply a callback that is called when the operation completes.\nThe API uses the error-first argument convention, so the first argument for the callback will always be an error value(or null). If the API returns some result, this will be provided as the second argument.\n例如：</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">modelName1.create({ name: &#39;recordName1&#39;}, function(err, recordName1_instance){\n  if (err) return handleError(err);\n})</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">创建一个modelName1的新record，提供一个object对象&lt;code&gt;{name: &#39;recordName1&#39;}&lt;/code&gt;描述如何创建新record，提供一个callback函数&lt;code&gt;function(err, instance){}&lt;/code&gt;，当创建操作完成后，调用此函数，按照惯例或约定，n默认第一个参数总是error value(or null)，若有返回值，如本例子中返回创建的新record实例，则作为callback函数的第二个参数．\n\n附录：</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Following are all valid Schema Types.\n  String\n  Number\n  Date\n  Buffer\n  Boolean\n  Mixed\n  Objectid\n  Array</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">更多细节有待更深入学习mongoose通过其&lt;a href=&quot;http://mongoosejs.com/index.html&quot;&gt;doc&lt;/a&gt;\n\ncontrollers:functions that separate out the code to route requests from the code that actually processes requests.</code></pre></div>","frontmatter":{"title":"express学习笔记","date":"September 18, 2017","tags":["ubuntu","DNS"]}}},"pageContext":{"previous":{"fields":{"urlPath":"/20170910"},"frontmatter":{"title":"开篇-自警","publish":true,"tags":["自警","鲁迅"]}},"next":{"fields":{"urlPath":"/20180408"},"frontmatter":{"title":"ubuntu 16.04 安装mysql","publish":true,"tags":null}}}}